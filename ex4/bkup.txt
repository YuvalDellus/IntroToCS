import hangman_helper
import PIL

MAX_ERRORS = 6
WIN_MSG = 'Correct guess, this is the word!!!'
LOSS_MSG = 'You have run out of guesses, the word was: '
ALREADY_CHOSEN_MSG = 'You have already chosen '
NON_VALID_MSG = 'Please enter a valid letter'
HINT_MSG = 'Consider choosing: '
NO_HINTS_MSG = 'Hints not supported'
DEFAULT_MSG = ''
HINT = 1
LETTER = 2
PLAY_AGAIN = 3


def update_word_pattern(word, pattern, letter):
    """Checks if the letter in the world and updates the pattern"""
    temp_pattern = list(pattern)  # easier to manipulate a list
    for (i, l) in enumerate(pattern):  # runs on the index instead the letter
        if word[i] == letter:
            temp_pattern[i] = letter
    temp_pattern = "".join(temp_pattern)  # back to string
    return temp_pattern


def run_single_game(words_list):
    print("bbb")
    word = hangman_helper.get_random_word(words_list)
    print("ccc")
    pattern = "_"*len(word)
    error_count = 0
    wrong_guess_lst = list()
    print("ddd")
    msg = DEFAULT_MSG
    print("eee")
    print(word)

    while "_" in pattern and error_count != MAX_ERRORS:
        print("fff")
        hangman_helper.display_state(pattern, error_count, wrong_guess_lst, msg)
        print("hhh")
        command = hangman_helper.get_input()
        if command == "yes/ no": ##########################################################
            pass

        elif len(command) != 1 and command.isalpha() and command == command.upper():
            msg = NON_VALID_MSG

        elif command in wrong_guess_lst:
            msg = ALREADY_CHOSEN_MSG + str(command)

        elif command in word:
            pattern = update_word_pattern(word, pattern, command)
            msg = DEFAULT_MSG

        else:
            wrong_guess_lst.append(command)
            error_count += 1
            msg = DEFAULT_MSG

    if pattern == word:
        hangman_helper.display_state(pattern, error_count, wrong_guess_lst, WIN_MSG)
    else:
        msg = LOSS_MSG + word
        hangman_helper.display_state(pattern, error_count, wrong_guess_lst, msg, True)

def main():
    words_list = hangman_helper.load_words()
    print("aaa")
    run_single_game(words_list)

main()